1. Clone the sample app

First, clone the sample app GitHub repo.


git clone https://github.com/IBM-Bluemix/get-started-java
2. Run the app locally using command line

Use Maven to build your source code and run the resulting app.

On the command line, change the directory to where the sample app is located.


cd get-started-java
Use Maven to install dependencies and build the .war file.


mvn clean install
Run the app locally on Liberty.


mvn install liberty:run-server
When you see the message The server defaultServer is ready to run a smarter planet., view your app at: http://localhost:9080/GetStartedJava.

To stop your app, press Ctrl-C in the command-line window where you started the app.

3. Prepare the app for deployment

To deploy to Bluemix, it can be helpful to set up a manifest.yml file. The manifest.yml includes basic information about your app, such as the name, how much memory to allocate for each instance and the route. We've provided a sample manifest.yml file in the get-started-java directory.

Open the manifest.yml file, and change the name from GetStartedJava to your app name, CardlessTransaction.


  applications:
   - name: GetStartedJava
     random-route: true
     path: target/GetStartedJava.war
     memory: 512M
     instances: 1
In this manifest.yml file, random-route: true generates a random route for your app to prevent your route from colliding with others. If you choose to, you can replace random-route: true with host: myChosenHostName, supplying a host name of your choice. Learn more...

4. Deploy to Bluemix

Deploy your app to one of the following Bluemix regions. For optimal latency, choose a region that's closest to your users.

Region	API endpoint
US South	https://api.ng.bluemix.net
United Kingdom	https://api.eu-gb.bluemix.net
Sydney	https://api.au-syd.bluemix.net
Set the API endpoint by replacing <API-endpoint> with the endpoint for your region.


cf api <API-endpoint>
Log in to your Bluemix account.


cf login
From within the get-started-java directory, push your application to Bluemix.


cf push
Deploying your application can take a few minutes. When deployment completes, you'll see a message that your app is running. View your app at the URL listed in the output of the push command, or view both the app deployment status and the URL by running the following command:


cf apps
You can troubleshoot errors in the deployment process by using the cf logs <Your-App-Name> --recent command.

5. Developing using Eclipse

IBM® Eclipse Tools for Bluemix® provides plug-ins that can be installed into an existing Eclipse environment to assist in integrating your integrated development environment (IDE) with Bluemix.

Make sure that you have the IBM Eclipse Tools for Bluemix.

Import the get-started-java sample into Eclipse by going to File > Import > Maven > Existing Maven Projects.

Create a Liberty server definition. The following steps will download a new Liberty server.

In the Window > Show View > Servers view, right-click and select New > Server.
Select IBM > WebSphere Application Server Liberty.
Select Install from an archive or a repository.
When prompted, enter a destination path to a new folder (/Users/username/liberty) where you want to install Liberty.
Select Download and install a new runtime environment from ibm.com.
Select WAS Liberty with Java EE 7 Web Profile.
Continue the wizard with default options to finish.
Run your application locally on Liberty:

Change the web browser to the system default by going to Window > Web Browser > Default system web browser.
Right-click on the GetStartedJava sample, and select Run As > Run on Server.
Find and select the localhost Liberty server, and click Finish.
In a few seconds, your application will be running at http://localhost:9080/GetStartedJava.

Update code:

Open src/main/webapp/index.html, and update the heading from <h1>Welcome.</h1> to <h1>Welcome Jane.</h1>.
Save your changes. Liberty will pick up your changes automatically.
Refresh your browser (http://localhost:9080/GetStartedJava) to see the changes.
Push your changes to Bluemix:

From the get-started-java directory on the command line, rebuild the .war file.

mvn clean install
Push your application to Bluemix.

cf push
Now you have run your code both locally and on the cloud!

6. Add a database

Next, we'll add a NoSQL database to this application and set up the application so that it can run locally and on Bluemix.

In your browser, log in to Bluemix and go to the Dashboard. Select your application by clicking on its name in the Name column.
Click on Connections and then Connect new.
In the Data & Analytics section, select Cloudant NoSQL DB and then create the service.
Select Restage when prompted. Bluemix will restart your application and provide the database credentials to your application using the VCAP_SERVICES environment variable. This environment variable is available to the application only when it is running on Bluemix.
Environment variables enable you to separate deployment settings from your source code. For example, instead of hardcoding a database password, you can store this in an environment variable which you reference in your source code. Learn more...

7. Use the database

We're now going to update your local code to point to this database. We'll store the credentials for the services in a properties file. This file will get used ONLY when the application is running locally. When running in Bluemix, the credentials will be read from the VCAP_SERVICES environment variable.

In Eclipse, open the src/main/resources/cloudant.properties file:


cloudant_url=
In your browser, go to Bluemix and select Apps > your app > Connections > Cloudant > View Credentials.

Copy and paste just the url from the credentials to the url field of the cloudant.properties file, and save the changes.


cloudant_url=https://123456789 ... bluemix.cloudant.com
Restart the Liberty server in Eclipse from the Servers view.

Refresh your browser view at http://localhost:9080/GetStartedJava/. Any names you enter into the app will now get added to the database.

Your local app and the Bluemix app are sharing the database. Names you add from either app will appear in both when you refresh the browsers.

Remember, if you don't need your app live on Bluemix, stop the app so you don't incur any unexpected charges.